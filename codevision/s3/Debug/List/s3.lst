
AVRASM ver. 2.1.30  C:\Users\ClassY\Documents\codevision\s3\Debug\List\s3.asm Wed Oct 25 07:23:59 2023

                 
                 
                 ;CodeVisionAVR C Compiler V3.14 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 003e 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _sevenSegmentNumberCodes:
00002a 003f
00002b 0006
00002c 005b
00002d 004f      	.DB  0x3F,0x0,0x6,0x0,0x5B,0x0,0x4F,0x0
00002e 0066
00002f 006d
000030 00fd
000031 0007      	.DB  0x66,0x0,0x6D,0x0,0xFD,0x0,0x7,0x0
000032 007f
000033 006f      	.DB  0x7F,0x0,0x6F,0x0
                 
                 _0x2020060:
C:\Users\ClassY\Documents\codevision\s3\Debug\List\s3.asm(1122): warning: .cseg .db misalignment - padding zero byte
000034 0001      	.DB  0x1
                 _0x2020000:
000035 4e2d
000036 4e41
000037 4900
000038 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\Users\ClassY\Documents\codevision\s3\Debug\List\s3.asm(1125): warning: .cseg .db misalignment - padding zero byte
000039 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
00003a 0001      	.DW  0x01
00003b 0160      	.DW  __seed_G101
00003c 0068      	.DW  _0x2020060*2
                 
                 _0xFFFFFFFF:
00003d 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00003e 94f8      	CLI
00003f 27ee      	CLR  R30
000040 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000041 e0f1      	LDI  R31,1
000042 bffb      	OUT  GICR,R31
000043 bfeb      	OUT  GICR,R30
000044 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000045 e08d      	LDI  R24,(14-2)+1
000046 e0a2      	LDI  R26,2
000047 27bb      	CLR  R27
                 __CLEAR_REG:
000048 93ed      	ST   X+,R30
000049 958a      	DEC  R24
00004a f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00004b e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00004c e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00004d e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00004e 93ed      	ST   X+,R30
00004f 9701      	SBIW R24,1
000050 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000051 e7e4      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000052 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000053 9185      	LPM  R24,Z+
000054 9195      	LPM  R25,Z+
000055 9700      	SBIW R24,0
000056 f061      	BREQ __GLOBAL_INI_END
000057 91a5      	LPM  R26,Z+
000058 91b5      	LPM  R27,Z+
000059 9005      	LPM  R0,Z+
00005a 9015      	LPM  R1,Z+
00005b 01bf      	MOVW R22,R30
00005c 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00005d 9005      	LPM  R0,Z+
00005e 920d      	ST   X+,R0
00005f 9701      	SBIW R24,1
000060 f7e1      	BRNE __GLOBAL_INI_LOOP
000061 01fb      	MOVW R30,R22
000062 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000063 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000064 bfed      	OUT  SPL,R30
000065 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000066 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000067 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000068 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000069 940c 00f9 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;/*******************************************************
                 ;This program was created by the
                 ;CodeWizardAVR V3.14 Advanced
                 ;Automatic Program Generator
                 ;� Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 ;
                 ;Project :
                 ;Version :
                 ;Date    : 10/25/2023
                 ;Author  :
                 ;Company :
                 ;Comments:
                 ;
                 ;
                 ;Chip type               : ATmega16
                 ;Program type            : Application
                 ;AVR Core Clock frequency: 8.000000 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 256
                 ;*******************************************************/
                 ;
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <math.h>
                 ;#include <stdint.h>
                 ;
                 ;const int sevenSegmentNumberCodes[] = {0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0xfd, 0x07, 0x7f, 0x6f};
                 ;
                 ;uint8_t rotateRight(uint8_t value)
                 ; 0000 0020 {
                 
                 	.CSEG
                 ; 0000 0021   return (value >> 1) | (value << 7);
                 ;	value -> Y+0
                 ; 0000 0022 }
                 ;
                 ;uint8_t rotateLeft(uint8_t value)
                 ; 0000 0025 {
                 _rotateLeft:
                 ; .FSTART _rotateLeft
                 ; 0000 0026   return (value << 1) | (value >> 7);
00006b 93aa      	ST   -Y,R26
                 ;	value -> Y+0
00006c 81e8      	LD   R30,Y
00006d 0fee      	LSL  R30
00006e 2fae      	MOV  R26,R30
00006f 81e8      	LD   R30,Y
000070 1fee      	ROL  R30
000071 e0e0      	LDI  R30,0
000072 1fee      	ROL  R30
000073 2bea      	OR   R30,R26
000074 9621      	ADIW R28,1
000075 9508      	RET
                 ; 0000 0027 }
                 ; .FEND
                 ;
                 ;short getNumberLength(int number)
                 ; 0000 002A {
                 _getNumberLength:
                 ; .FSTART _getNumberLength
                 ; 0000 002B   int numberLength = 0;
                 ; 0000 002C   do
000076 940e 02db 	CALL SUBOPT_0x0
                 ;	number -> Y+2
                 ;	numberLength -> R16,R17
                 _0x4:
                 ; 0000 002D   {
                 ; 0000 002E     numberLength += 1;
                +
000078 5f0f     +SUBI R16 , LOW ( - 1 )
000079 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
                 ; 0000 002F   } while ((int)(number / pow(10, numberLength)) > 0);
00007a 940e 02e2 	CALL SUBOPT_0x1
00007c 940e 02ea 	CALL SUBOPT_0x2
00007e 81aa      	LDD  R26,Y+2
00007f 81bb      	LDD  R27,Y+2+1
000080 940e 02f2 	CALL SUBOPT_0x3
000082 940e 03bb 	CALL __CFD1
000084 2766      	CLR  R22
000085 2777      	CLR  R23
000086 940e 0596 	CALL __CPW01
000088 f37c      	BRLT _0x4
                 ; 0000 0030   return numberLength;
000089 01f8      	MOVW R30,R16
00008a 8119      	LDD  R17,Y+1
00008b 8108      	LDD  R16,Y+0
00008c 940c 016f 	JMP  _0x2080005
                 ; 0000 0031 }
                 ; .FEND
                 ;
                 ;// 1-indexed
                 ;// for instance 8123 -> 3 = 1st digit
                 ;// for instance 8123 -> 8 = 4st digit
                 ;char getDigitAt(int number, int digit)
                 ; 0000 0037 {
                 _getDigitAt:
                 ; .FSTART _getDigitAt
                 ; 0000 0038   int i = 0;
                 ; 0000 0039   int remainder = number;
                 ; 0000 003A   int quotient = 0;
                 ; 0000 003B   for (i = getNumberLength(number); i >= digit; i--)
00008e 93ba      	ST   -Y,R27
00008f 93aa      	ST   -Y,R26
000090 940e 05a9 	CALL __SAVELOCR6
                 ;	number -> Y+8
                 ;	digit -> Y+6
                 ;	i -> R16,R17
                 ;	remainder -> R18,R19
                 ;	quotient -> R20,R21
                +
000092 e000     +LDI R16 , LOW ( 0 )
000093 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
000094 8528     +LDD R18 , Y + 8
000095 8539     +LDD R19 , Y + 8 + 1
                 	__GETWRS 18,19,8
                +
000096 e040     +LDI R20 , LOW ( 0 )
000097 e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
000098 85a8      	LDD  R26,Y+8
000099 85b9      	LDD  R27,Y+8+1
00009a dfdb      	RCALL _getNumberLength
00009b 018f      	MOVW R16,R30
                 _0x7:
00009c 81ee      	LDD  R30,Y+6
00009d 81ff      	LDD  R31,Y+6+1
00009e 170e      	CP   R16,R30
00009f 071f      	CPC  R17,R31
0000a0 f13c      	BRLT _0x8
                 ; 0000 003C   {
                 ; 0000 003D     quotient = floor(remainder / ceil(pow(10, i - 1)));
0000a1 940e 02e2 	CALL SUBOPT_0x1
0000a3 9731      	SBIW R30,1
0000a4 940e 02ea 	CALL SUBOPT_0x2
0000a6 01df      	MOVW R26,R30
0000a7 01cb      	MOVW R24,R22
0000a8 940e 0164 	CALL _ceil
0000aa 01d9      	MOVW R26,R18
0000ab 940e 02f2 	CALL SUBOPT_0x3
0000ad 940e 02f9 	CALL SUBOPT_0x4
0000af 01af      	MOVW R20,R30
                 ; 0000 003E     remainder = floor(remainder % (int)ceil(pow(10, i - 1)));
0000b0 940e 02e2 	CALL SUBOPT_0x1
0000b2 9731      	SBIW R30,1
0000b3 940e 02ea 	CALL SUBOPT_0x2
0000b5 01df      	MOVW R26,R30
0000b6 01cb      	MOVW R24,R22
0000b7 940e 0164 	CALL _ceil
0000b9 940e 03bb 	CALL __CFD1
0000bb 2766      	CLR  R22
0000bc 2777      	CLR  R23
0000bd 01d9      	MOVW R26,R18
0000be 940e 0558 	CALL __MODW21
0000c0 940e 0300 	CALL SUBOPT_0x5
0000c2 940e 02f9 	CALL SUBOPT_0x4
0000c4 019f      	MOVW R18,R30
                 ; 0000 003F   }
                +
0000c5 5001     +SUBI R16 , LOW ( 1 )
0000c6 4010     +SBCI R17 , HIGH ( 1 )
                 	__SUBWRN 16,17,1
0000c7 cfd4      	RJMP _0x7
                 _0x8:
                 ; 0000 0040   return quotient;
0000c8 2fe4      	MOV  R30,R20
0000c9 940e 05b0 	CALL __LOADLOCR6
0000cb 940c 01ef 	JMP  _0x2080004
                 ; 0000 0041 }
                 ; .FEND
                 ;
                 ;void showNumber(int number)
                 ; 0000 0044 {
                 _showNumber:
                 ; .FSTART _showNumber
                 ; 0000 0045   int i = 0;
                 ; 0000 0046   PORTD = 0xfe;
0000cd 940e 02db 	CALL SUBOPT_0x0
                 ;	number -> Y+2
                 ;	i -> R16,R17
0000cf efee      	LDI  R30,LOW(254)
0000d0 bbe2      	OUT  0x12,R30
                 ; 0000 0047   for (i = getNumberLength(number); i > 0; i--)
0000d1 81aa      	LDD  R26,Y+2
0000d2 81bb      	LDD  R27,Y+2+1
0000d3 dfa2      	RCALL _getNumberLength
0000d4 018f      	MOVW R16,R30
                 _0xA:
0000d5 2400      	CLR  R0
0000d6 1600      	CP   R0,R16
0000d7 0601      	CPC  R0,R17
0000d8 f4e4      	BRGE _0xB
                 ; 0000 0048   {
                 ; 0000 0049     PORTC = sevenSegmentNumberCodes[getDigitAt(number, i)];
0000d9 81ea      	LDD  R30,Y+2
0000da 81fb      	LDD  R31,Y+2+1
0000db 93fa      	ST   -Y,R31
0000dc 93ea      	ST   -Y,R30
0000dd 01d8      	MOVW R26,R16
0000de dfaf      	RCALL _getDigitAt
0000df e5a4      	LDI  R26,LOW(_sevenSegmentNumberCodes*2)
0000e0 e0b0      	LDI  R27,HIGH(_sevenSegmentNumberCodes*2)
0000e1 e0f0      	LDI  R31,0
0000e2 0fee      	LSL  R30
0000e3 1fff      	ROL  R31
0000e4 0fea      	ADD  R30,R26
0000e5 1ffb      	ADC  R31,R27
0000e6 9004      	LPM  R0,Z
0000e7 ba05      	OUT  0x15,R0
                 ; 0000 004A     delay_ms(1);
0000e8 e0a1      	LDI  R26,LOW(1)
0000e9 e0b0      	LDI  R27,0
0000ea 940e 035f 	CALL _delay_ms
                 ; 0000 004B     PORTD = rotateLeft(PORTD);
0000ec b3e2      	IN   R30,0x12
0000ed 2fae      	MOV  R26,R30
0000ee df7c      	RCALL _rotateLeft
0000ef bbe2      	OUT  0x12,R30
                 ; 0000 004C     PORTC = 0;
0000f0 e0e0      	LDI  R30,LOW(0)
0000f1 bbe5      	OUT  0x15,R30
                 ; 0000 004D   }
                +
0000f2 5001     +SUBI R16 , LOW ( 1 )
0000f3 4010     +SBCI R17 , HIGH ( 1 )
                 	__SUBWRN 16,17,1
0000f4 cfe0      	RJMP _0xA
                 _0xB:
                 ; 0000 004E }
0000f5 8119      	LDD  R17,Y+1
0000f6 8108      	LDD  R16,Y+0
0000f7 940c 016f 	JMP  _0x2080005
                 ; .FEND
                 ;
                 ;// Declare your global variables here
                 ;
                 ;void main(void)
                 ; 0000 0053 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0054     // Declare your local variables here
                 ; 0000 0055 
                 ; 0000 0056     // Input/Output Ports initialization
                 ; 0000 0057     // Port A initialization
                 ; 0000 0058     // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0059     DDRA = (0 << DDA7) | (0 << DDA6) | (0 << DDA5) | (0 << DDA4) | (0 << DDA3) | (0 << DDA2) | (0 << DDA1) | (0 << DDA0) ...
0000f9 e0e0      	LDI  R30,LOW(0)
0000fa bbea      	OUT  0x1A,R30
                 ; 0000 005A     // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 005B     PORTA = (0 << PORTA7) | (0 << PORTA6) | (0 << PORTA5) | (0 << PORTA4) | (0 << PORTA3) | (0 << PORTA2) | (0 << PORTA1 ...
0000fb bbeb      	OUT  0x1B,R30
                 ; 0000 005C 
                 ; 0000 005D     // Port B initialization
                 ; 0000 005E     // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 005F     DDRB = (0 << DDB7) | (0 << DDB6) | (0 << DDB5) | (0 << DDB4) | (0 << DDB3) | (0 << DDB2) | (0 << DDB1) | (0 << DDB0) ...
0000fc bbe7      	OUT  0x17,R30
                 ; 0000 0060     // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0061     PORTB = (0 << PORTB7) | (0 << PORTB6) | (0 << PORTB5) | (0 << PORTB4) | (0 << PORTB3) | (0 << PORTB2) | (0 << PORTB1 ...
0000fd bbe8      	OUT  0x18,R30
                 ; 0000 0062 
                 ; 0000 0063     // Port C initialization
                 ; 0000 0064     // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0065     DDRC = (1 << DDC7) | (1 << DDC6) | (1 << DDC5) | (1 << DDC4) | (1 << DDC3) | (1 << DDC2) | (1 << DDC1) | (1 << DDC0) ...
0000fe efef      	LDI  R30,LOW(255)
0000ff bbe4      	OUT  0x14,R30
                 ; 0000 0066     // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0067     PORTC = (0 << PORTC7) | (0 << PORTC6) | (0 << PORTC5) | (0 << PORTC4) | (0 << PORTC3) | (0 << PORTC2) | (0 << PORTC1 ...
000100 e0e0      	LDI  R30,LOW(0)
000101 bbe5      	OUT  0x15,R30
                 ; 0000 0068 
                 ; 0000 0069     // Port D initialization
                 ; 0000 006A     // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 006B     DDRD = (1 << DDD7) | (1 << DDD6) | (1 << DDD5) | (1 << DDD4) | (1 << DDD3) | (1 << DDD2) | (1 << DDD1) | (1 << DDD0) ...
000102 efef      	LDI  R30,LOW(255)
000103 bbe1      	OUT  0x11,R30
                 ; 0000 006C     // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 006D     PORTD = (0 << PORTD7) | (0 << PORTD6) | (0 << PORTD5) | (0 << PORTD4) | (0 << PORTD3) | (0 << PORTD2) | (0 << PORTD1 ...
000104 e0e0      	LDI  R30,LOW(0)
000105 bbe2      	OUT  0x12,R30
                 ; 0000 006E 
                 ; 0000 006F     // Timer/Counter 0 initialization
                 ; 0000 0070     // Clock source: System Clock
                 ; 0000 0071     // Clock value: Timer 0 Stopped
                 ; 0000 0072     // Mode: Normal top=0xFF
                 ; 0000 0073     // OC0 output: Disconnected
                 ; 0000 0074     TCCR0 = (0 << WGM00) | (0 << COM01) | (0 << COM00) | (0 << WGM01) | (0 << CS02) | (0 << CS01) | (0 << CS00);
000106 bfe3      	OUT  0x33,R30
                 ; 0000 0075     TCNT0 = 0x00;
000107 bfe2      	OUT  0x32,R30
                 ; 0000 0076     OCR0 = 0x00;
000108 bfec      	OUT  0x3C,R30
                 ; 0000 0077 
                 ; 0000 0078     // Timer/Counter 1 initialization
                 ; 0000 0079     // Clock source: System Clock
                 ; 0000 007A     // Clock value: Timer1 Stopped
                 ; 0000 007B     // Mode: Normal top=0xFFFF
                 ; 0000 007C     // OC1A output: Disconnected
                 ; 0000 007D     // OC1B output: Disconnected
                 ; 0000 007E     // Noise Canceler: Off
                 ; 0000 007F     // Input Capture on Falling Edge
                 ; 0000 0080     // Timer1 Overflow Interrupt: Off
                 ; 0000 0081     // Input Capture Interrupt: Off
                 ; 0000 0082     // Compare A Match Interrupt: Off
                 ; 0000 0083     // Compare B Match Interrupt: Off
                 ; 0000 0084     TCCR1A = (0 << COM1A1) | (0 << COM1A0) | (0 << COM1B1) | (0 << COM1B0) | (0 << WGM11) | (0 << WGM10);
000109 bdef      	OUT  0x2F,R30
                 ; 0000 0085     TCCR1B = (0 << ICNC1) | (0 << ICES1) | (0 << WGM13) | (0 << WGM12) | (0 << CS12) | (0 << CS11) | (0 << CS10);
00010a bdee      	OUT  0x2E,R30
                 ; 0000 0086     TCNT1H = 0x00;
00010b bded      	OUT  0x2D,R30
                 ; 0000 0087     TCNT1L = 0x00;
00010c bdec      	OUT  0x2C,R30
                 ; 0000 0088     ICR1H = 0x00;
00010d bde7      	OUT  0x27,R30
                 ; 0000 0089     ICR1L = 0x00;
00010e bde6      	OUT  0x26,R30
                 ; 0000 008A     OCR1AH = 0x00;
00010f bdeb      	OUT  0x2B,R30
                 ; 0000 008B     OCR1AL = 0x00;
000110 bdea      	OUT  0x2A,R30
                 ; 0000 008C     OCR1BH = 0x00;
000111 bde9      	OUT  0x29,R30
                 ; 0000 008D     OCR1BL = 0x00;
000112 bde8      	OUT  0x28,R30
                 ; 0000 008E 
                 ; 0000 008F     // Timer/Counter 2 initialization
                 ; 0000 0090     // Clock source: System Clock
                 ; 0000 0091     // Clock value: Timer2 Stopped
                 ; 0000 0092     // Mode: Normal top=0xFF
                 ; 0000 0093     // OC2 output: Disconnected
                 ; 0000 0094     ASSR = 0 << AS2;
000113 bde2      	OUT  0x22,R30
                 ; 0000 0095     TCCR2 = (0 << PWM2) | (0 << COM21) | (0 << COM20) | (0 << CTC2) | (0 << CS22) | (0 << CS21) | (0 << CS20);
000114 bde5      	OUT  0x25,R30
                 ; 0000 0096     TCNT2 = 0x00;
000115 bde4      	OUT  0x24,R30
                 ; 0000 0097     OCR2 = 0x00;
000116 bde3      	OUT  0x23,R30
                 ; 0000 0098 
                 ; 0000 0099     // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 009A     TIMSK = (0 << OCIE2) | (0 << TOIE2) | (0 << TICIE1) | (0 << OCIE1A) | (0 << OCIE1B) | (0 << TOIE1) | (0 << OCIE0) |  ...
000117 bfe9      	OUT  0x39,R30
                 ; 0000 009B 
                 ; 0000 009C     // External Interrupt(s) initialization
                 ; 0000 009D     // INT0: Off
                 ; 0000 009E     // INT1: Off
                 ; 0000 009F     // INT2: Off
                 ; 0000 00A0     MCUCR = (0 << ISC11) | (0 << ISC10) | (0 << ISC01) | (0 << ISC00);
000118 bfe5      	OUT  0x35,R30
                 ; 0000 00A1     MCUCSR = (0 << ISC2);
000119 bfe4      	OUT  0x34,R30
                 ; 0000 00A2 
                 ; 0000 00A3     // USART initialization
                 ; 0000 00A4     // USART disabled
                 ; 0000 00A5     UCSRB = (0 << RXCIE) | (0 << TXCIE) | (0 << UDRIE) | (0 << RXEN) | (0 << TXEN) | (0 << UCSZ2) | (0 << RXB8) | (0 <<  ...
00011a b9ea      	OUT  0xA,R30
                 ; 0000 00A6 
                 ; 0000 00A7     // Analog Comparator initialization
                 ; 0000 00A8     // Analog Comparator: Off
                 ; 0000 00A9     // The Analog Comparator's positive input is
                 ; 0000 00AA     // connected to the AIN0 pin
                 ; 0000 00AB     // The Analog Comparator's negative input is
                 ; 0000 00AC     // connected to the AIN1 pin
                 ; 0000 00AD     ACSR = (1 << ACD) | (0 << ACBG) | (0 << ACO) | (0 << ACI) | (0 << ACIE) | (0 << ACIC) | (0 << ACIS1) | (0 << ACIS0);
00011b e8e0      	LDI  R30,LOW(128)
00011c b9e8      	OUT  0x8,R30
                 ; 0000 00AE     SFIOR = (0 << ACME);
00011d e0e0      	LDI  R30,LOW(0)
00011e bfe0      	OUT  0x30,R30
                 ; 0000 00AF 
                 ; 0000 00B0     // ADC initialization
                 ; 0000 00B1     // ADC disabled
                 ; 0000 00B2     ADCSRA = (0 << ADEN) | (0 << ADSC) | (0 << ADATE) | (0 << ADIF) | (0 << ADIE) | (0 << ADPS2) | (0 << ADPS1) | (0 <<  ...
00011f b9e6      	OUT  0x6,R30
                 ; 0000 00B3 
                 ; 0000 00B4     // SPI initialization
                 ; 0000 00B5     // SPI disabled
                 ; 0000 00B6     SPCR = (0 << SPIE) | (0 << SPE) | (0 << DORD) | (0 << MSTR) | (0 << CPOL) | (0 << CPHA) | (0 << SPR1) | (0 << SPR0);
000120 b9ed      	OUT  0xD,R30
                 ; 0000 00B7 
                 ; 0000 00B8     // TWI initialization
                 ; 0000 00B9     // TWI disabled
                 ; 0000 00BA     TWCR = (0 << TWEA) | (0 << TWSTA) | (0 << TWSTO) | (0 << TWEN) | (0 << TWIE);
000121 bfe6      	OUT  0x36,R30
                 ; 0000 00BB 
                 ; 0000 00BC     while (1)
                 _0xC:
                 ; 0000 00BD     {
                 ; 0000 00BE         showNumber(1234);
000122 eda2      	LDI  R26,LOW(1234)
000123 e0b4      	LDI  R27,HIGH(1234)
000124 dfa8      	RCALL _showNumber
                 ; 0000 00BF     }
000125 cffc      	RJMP _0xC
                 ; 0000 00C0 }
                 _0xF:
000126 cfff      	RJMP _0xF
                 ; .FEND
                 
                 	.CSEG
                 _ftrunc:
                 ; .FSTART _ftrunc
000127 940e 057f 	CALL __PUTPARD2
000129 817b         ldd  r23,y+3
00012a 816a         ldd  r22,y+2
00012b 81f9         ldd  r31,y+1
00012c 81e8         ld   r30,y
00012d fb77         bst  r23,7
00012e 0f77         lsl  r23
00012f fd67         sbrc r22,7
000130 6071         sbr  r23,1
000131 2f97         mov  r25,r23
000132 579e         subi r25,0x7e
000133 f081         breq __ftrunc0
000134 f078         brcs __ftrunc0
000135 3198         cpi  r25,24
000136 f490         brsh __ftrunc1
000137 27aa         clr  r26
000138 27bb         clr  r27
000139 2788         clr  r24
                 __ftrunc2:
00013a 9408         sec
00013b 9587         ror  r24
00013c 95b7         ror  r27
00013d 95a7         ror  r26
00013e 959a         dec  r25
00013f f7d1         brne __ftrunc2
000140 23ea         and  r30,r26
000141 23fb         and  r31,r27
000142 2368         and  r22,r24
000143 c005         rjmp __ftrunc1
                 __ftrunc0:
000144 94e8         clt
000145 2777         clr  r23
000146 27ee         clr  r30
000147 27ff         clr  r31
000148 2766         clr  r22
                 __ftrunc1:
000149 776f         cbr  r22,0x80
00014a 9576         lsr  r23
00014b f408         brcc __ftrunc3
00014c 6860         sbr  r22,0x80
                 __ftrunc3:
00014d f977         bld  r23,7
00014e 91a9         ld   r26,y+
00014f 91b9         ld   r27,y+
000150 9189         ld   r24,y+
000151 9199         ld   r25,y+
000152 17ea         cp   r30,r26
000153 07fb         cpc  r31,r27
000154 0768         cpc  r22,r24
000155 0779         cpc  r23,r25
000156 fb97         bst  r25,7
000157 9508         ret
                 ; .FEND
                 _floor:
                 ; .FSTART _floor
000158 940e 0305 	CALL SUBOPT_0x6
00015a f419          brne __floor1
                 __floor0:
00015b 940e 030e 	CALL SUBOPT_0x7
00015d c011      	RJMP _0x2080005
                 __floor1:
00015e f7e6          brtc __floor0
00015f 940e 0311 	CALL SUBOPT_0x8
000161 940e 0425 	CALL __SUBF12
000163 c00b      	RJMP _0x2080005
                 ; .FEND
                 _ceil:
                 ; .FSTART _ceil
000164 940e 0305 	CALL SUBOPT_0x6
000166 f419          brne __ceil1
                 __ceil0:
000167 940e 030e 	CALL SUBOPT_0x7
000169 c005      	RJMP _0x2080005
                 __ceil1:
00016a f3e6          brts __ceil0
00016b 940e 0311 	CALL SUBOPT_0x8
00016d 940e 042c 	CALL __ADDF12
                 _0x2080005:
00016f 9624      	ADIW R28,4
000170 9508      	RET
                 ; .FEND
                 _log:
                 ; .FSTART _log
000171 940e 057f 	CALL __PUTPARD2
000173 9724      	SBIW R28,4
000174 931a      	ST   -Y,R17
000175 930a      	ST   -Y,R16
000176 940e 0317 	CALL SUBOPT_0x9
000178 940e 059e 	CALL __CPD02
00017a f02c      	BRLT _0x200000C
                +
00017b efef     +LDI R30 , LOW ( 0xFF7FFFFF )
00017c efff     +LDI R31 , HIGH ( 0xFF7FFFFF )
00017d e76f     +LDI R22 , BYTE3 ( 0xFF7FFFFF )
00017e ef7f     +LDI R23 , BYTE4 ( 0xFF7FFFFF )
                 	__GETD1N 0xFF7FFFFF
00017f c06d      	RJMP _0x2080003
                 _0x200000C:
000180 940e 031c 	CALL SUBOPT_0xA
000182 940e 057a 	CALL __PUTPARD1
000184 b7ad      	IN   R26,SPL
000185 b7be      	IN   R27,SPH
000186 9711      	SBIW R26,1
000187 931f      	PUSH R17
000188 930f      	PUSH R16
000189 940e 0369 	CALL _frexp
00018b 910f      	POP  R16
00018c 911f      	POP  R17
00018d 940e 0321 	CALL SUBOPT_0xB
00018f 940e 0317 	CALL SUBOPT_0x9
                +
000191 efe3     +LDI R30 , LOW ( 0x3F3504F3 )
000192 e0f4     +LDI R31 , HIGH ( 0x3F3504F3 )
000193 e365     +LDI R22 , BYTE3 ( 0x3F3504F3 )
000194 e37f     +LDI R23 , BYTE4 ( 0x3F3504F3 )
                 	__GETD1N 0x3F3504F3
000195 940e 050f 	CALL __CMPF12
000197 f440      	BRSH _0x200000D
000198 940e 0326 	CALL SUBOPT_0xC
00019a 940e 042c 	CALL __ADDF12
00019c 940e 0321 	CALL SUBOPT_0xB
                +
00019e 5001     +SUBI R16 , LOW ( 1 )
00019f 4010     +SBCI R17 , HIGH ( 1 )
                 	__SUBWRN 16,17,1
                 _0x200000D:
0001a0 940e 0328 	CALL SUBOPT_0xD
0001a2 940e 0425 	CALL __SUBF12
0001a4 937f      	PUSH R23
0001a5 936f      	PUSH R22
0001a6 93ff      	PUSH R31
0001a7 93ef      	PUSH R30
0001a8 940e 0328 	CALL SUBOPT_0xD
0001aa 940e 042c 	CALL __ADDF12
0001ac 91af      	POP  R26
0001ad 91bf      	POP  R27
0001ae 918f      	POP  R24
0001af 919f      	POP  R25
0001b0 940e 04ca 	CALL __DIVF21
0001b2 940e 0321 	CALL SUBOPT_0xB
0001b4 940e 0326 	CALL SUBOPT_0xC
0001b6 940e 032e 	CALL SUBOPT_0xE
                +
0001b8 e2a6     +LDI R26 , LOW ( 0x3F654226 )
0001b9 e4b2     +LDI R27 , HIGH ( 0x3F654226 )
0001ba e685     +LDI R24 , BYTE3 ( 0x3F654226 )
0001bb e39f     +LDI R25 , BYTE4 ( 0x3F654226 )
                 	__GETD2N 0x3F654226
0001bc 940e 0335 	CALL SUBOPT_0xF
                +
0001be e4ee     +LDI R30 , LOW ( 0x4054114E )
0001bf e1f1     +LDI R31 , HIGH ( 0x4054114E )
0001c0 e564     +LDI R22 , BYTE3 ( 0x4054114E )
0001c1 e470     +LDI R23 , BYTE4 ( 0x4054114E )
                 	__GETD1N 0x4054114E
0001c2 940e 033a 	CALL SUBOPT_0x10
0001c4 940e 0317 	CALL SUBOPT_0x9
0001c6 940e 047c 	CALL __MULF12
0001c8 937f      	PUSH R23
0001c9 936f      	PUSH R22
0001ca 93ff      	PUSH R31
0001cb 93ef      	PUSH R30
0001cc 940e 033f 	CALL SUBOPT_0x11
                +
0001ce e4ad     +LDI R26 , LOW ( 0x3FD4114D )
0001cf e1b1     +LDI R27 , HIGH ( 0x3FD4114D )
0001d0 ed84     +LDI R24 , BYTE3 ( 0x3FD4114D )
0001d1 e39f     +LDI R25 , BYTE4 ( 0x3FD4114D )
                 	__GETD2N 0x3FD4114D
0001d2 940e 0425 	CALL __SUBF12
0001d4 91af      	POP  R26
0001d5 91bf      	POP  R27
0001d6 918f      	POP  R24
0001d7 919f      	POP  R25
0001d8 940e 04ca 	CALL __DIVF21
0001da 937f      	PUSH R23
0001db 936f      	PUSH R22
0001dc 93ff      	PUSH R31
0001dd 93ef      	PUSH R30
0001de 01f8      	MOVW R30,R16
0001df 940e 0300 	CALL SUBOPT_0x5
                +
0001e1 e1a8     +LDI R26 , LOW ( 0x3F317218 )
0001e2 e7b2     +LDI R27 , HIGH ( 0x3F317218 )
0001e3 e381     +LDI R24 , BYTE3 ( 0x3F317218 )
0001e4 e39f     +LDI R25 , BYTE4 ( 0x3F317218 )
                 	__GETD2N 0x3F317218
0001e5 940e 047c 	CALL __MULF12
0001e7 91af      	POP  R26
0001e8 91bf      	POP  R27
0001e9 918f      	POP  R24
0001ea 919f      	POP  R25
0001eb 940e 042c 	CALL __ADDF12
                 _0x2080003:
0001ed 8119      	LDD  R17,Y+1
0001ee 8108      	LDD  R16,Y+0
                 _0x2080004:
0001ef 962a      	ADIW R28,10
0001f0 9508      	RET
                 ; .FEND
                 _exp:
                 ; .FSTART _exp
0001f1 940e 057f 	CALL __PUTPARD2
0001f3 9728      	SBIW R28,8
0001f4 931a      	ST   -Y,R17
0001f5 930a      	ST   -Y,R16
0001f6 940e 0344 	CALL SUBOPT_0x12
                +
0001f8 e5e0     +LDI R30 , LOW ( 0xC2AEAC50 )
0001f9 eafc     +LDI R31 , HIGH ( 0xC2AEAC50 )
0001fa ea6e     +LDI R22 , BYTE3 ( 0xC2AEAC50 )
0001fb ec72     +LDI R23 , BYTE4 ( 0xC2AEAC50 )
                 	__GETD1N 0xC2AEAC50
0001fc 940e 050f 	CALL __CMPF12
0001fe f418      	BRSH _0x200000F
0001ff 940e 0349 	CALL SUBOPT_0x13
000201 c083      	RJMP _0x2080002
                 _0x200000F:
                +
000202 85ea     +LDD R30 , Y + 10
000203 85fb     +LDD R31 , Y + 10 + 1
000204 856c     +LDD R22 , Y + 10 + 2
000205 857d     +LDD R23 , Y + 10 + 3
                 	__GETD1S 10
000206 940e 059a 	CALL __CPD10
000208 f429      	BRNE _0x2000010
                +
000209 e0e0     +LDI R30 , LOW ( 0x3F800000 )
00020a e0f0     +LDI R31 , HIGH ( 0x3F800000 )
00020b e860     +LDI R22 , BYTE3 ( 0x3F800000 )
00020c e37f     +LDI R23 , BYTE4 ( 0x3F800000 )
                 	__GETD1N 0x3F800000
00020d c077      	RJMP _0x2080002
                 _0x2000010:
00020e 940e 0344 	CALL SUBOPT_0x12
                +
000210 e1e8     +LDI R30 , LOW ( 0x42B17218 )
000211 e7f2     +LDI R31 , HIGH ( 0x42B17218 )
000212 eb61     +LDI R22 , BYTE3 ( 0x42B17218 )
000213 e472     +LDI R23 , BYTE4 ( 0x42B17218 )
                 	__GETD1N 0x42B17218
000214 940e 050f 	CALL __CMPF12
000216 f009      	BREQ PC+2
000217 f408      	BRCC PC+2
000218 c005      	RJMP _0x2000011
                +
000219 efef     +LDI R30 , LOW ( 0x7F7FFFFF )
00021a efff     +LDI R31 , HIGH ( 0x7F7FFFFF )
00021b e76f     +LDI R22 , BYTE3 ( 0x7F7FFFFF )
00021c e77f     +LDI R23 , BYTE4 ( 0x7F7FFFFF )
                 	__GETD1N 0x7F7FFFFF
00021d c067      	RJMP _0x2080002
                 _0x2000011:
00021e 940e 0344 	CALL SUBOPT_0x12
                +
000220 e3eb     +LDI R30 , LOW ( 0x3FB8AA3B )
000221 eafa     +LDI R31 , HIGH ( 0x3FB8AA3B )
000222 eb68     +LDI R22 , BYTE3 ( 0x3FB8AA3B )
000223 e37f     +LDI R23 , BYTE4 ( 0x3FB8AA3B )
                 	__GETD1N 0x3FB8AA3B
000224 940e 047c 	CALL __MULF12
                +
000226 87ea     +STD Y + 10 , R30
000227 87fb     +STD Y + 10 + 1 , R31
000228 876c     +STD Y + 10 + 2 , R22
000229 877d     +STD Y + 10 + 3 , R23
                 	__PUTD1S 10
00022a 940e 0344 	CALL SUBOPT_0x12
00022c df2b      	RCALL _floor
00022d 940e 03bb 	CALL __CFD1
00022f 018f      	MOVW R16,R30
000230 940e 0344 	CALL SUBOPT_0x12
000232 940e 0300 	CALL SUBOPT_0x5
000234 940e 033a 	CALL SUBOPT_0x10
000236 01df      	MOVW R26,R30
000237 01cb      	MOVW R24,R22
                +
000238 e0e0     +LDI R30 , LOW ( 0x3F000000 )
000239 e0f0     +LDI R31 , HIGH ( 0x3F000000 )
00023a e060     +LDI R22 , BYTE3 ( 0x3F000000 )
00023b e37f     +LDI R23 , BYTE4 ( 0x3F000000 )
                 	__GETD1N 0x3F000000
00023c 940e 033a 	CALL SUBOPT_0x10
00023e 940e 0321 	CALL SUBOPT_0xB
000240 940e 0326 	CALL SUBOPT_0xC
000242 940e 032e 	CALL SUBOPT_0xE
                +
000244 e6ad     +LDI R26 , LOW ( 0x3D6C4C6D )
000245 e4bc     +LDI R27 , HIGH ( 0x3D6C4C6D )
000246 e68c     +LDI R24 , BYTE3 ( 0x3D6C4C6D )
000247 e39d     +LDI R25 , BYTE4 ( 0x3D6C4C6D )
                 	__GETD2N 0x3D6C4C6D
000248 940e 047c 	CALL __MULF12
                +
00024a eaa6     +LDI R26 , LOW ( 0x40E6E3A6 )
00024b eeb3     +LDI R27 , HIGH ( 0x40E6E3A6 )
00024c ee86     +LDI R24 , BYTE3 ( 0x40E6E3A6 )
00024d e490     +LDI R25 , BYTE4 ( 0x40E6E3A6 )
                 	__GETD2N 0x40E6E3A6
00024e 940e 042c 	CALL __ADDF12
000250 940e 0317 	CALL SUBOPT_0x9
000252 940e 047c 	CALL __MULF12
000254 940e 0321 	CALL SUBOPT_0xB
000256 940e 033f 	CALL SUBOPT_0x11
                +
000258 e2a8     +LDI R26 , LOW ( 0x41A68D28 )
000259 e8bd     +LDI R27 , HIGH ( 0x41A68D28 )
00025a ea86     +LDI R24 , BYTE3 ( 0x41A68D28 )
00025b e491     +LDI R25 , BYTE4 ( 0x41A68D28 )
                 	__GETD2N 0x41A68D28
00025c 940e 042c 	CALL __ADDF12
                +
00025e 83ea     +STD Y + 2 , R30
00025f 83fb     +STD Y + 2 + 1 , R31
000260 836c     +STD Y + 2 + 2 , R22
000261 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
000262 940e 031c 	CALL SUBOPT_0xA
                +
000264 81aa     +LDD R26 , Y + 2
000265 81bb     +LDD R27 , Y + 2 + 1
000266 818c     +LDD R24 , Y + 2 + 2
000267 819d     +LDD R25 , Y + 2 + 3
                 	__GETD2S 2
000268 940e 042c 	CALL __ADDF12
                +
00026a efa3     +LDI R26 , LOW ( 0x3FB504F3 )
00026b e0b4     +LDI R27 , HIGH ( 0x3FB504F3 )
00026c eb85     +LDI R24 , BYTE3 ( 0x3FB504F3 )
00026d e39f     +LDI R25 , BYTE4 ( 0x3FB504F3 )
                 	__GETD2N 0x3FB504F3
00026e 940e 047c 	CALL __MULF12
000270 937f      	PUSH R23
000271 936f      	PUSH R22
000272 93ff      	PUSH R31
000273 93ef      	PUSH R30
000274 940e 0317 	CALL SUBOPT_0x9
000276 940e 033f 	CALL SUBOPT_0x11
000278 940e 0425 	CALL __SUBF12
00027a 91af      	POP  R26
00027b 91bf      	POP  R27
00027c 918f      	POP  R24
00027d 919f      	POP  R25
00027e 940e 04ca 	CALL __DIVF21
000280 940e 057a 	CALL __PUTPARD1
000282 01d8      	MOVW R26,R16
000283 940e 037a 	CALL _ldexp
                 _0x2080002:
000285 8119      	LDD  R17,Y+1
000286 8108      	LDD  R16,Y+0
000287 962e      	ADIW R28,14
000288 9508      	RET
                 ; .FEND
                 _pow:
                 ; .FSTART _pow
000289 940e 057f 	CALL __PUTPARD2
00028b 9724      	SBIW R28,4
00028c 940e 034e 	CALL SUBOPT_0x14
00028e 940e 059a 	CALL __CPD10
000290 f419      	BRNE _0x2000012
000291 940e 0349 	CALL SUBOPT_0x13
000293 c045      	RJMP _0x2080001
                 _0x2000012:
                +
000294 85a8     +LDD R26 , Y + 8
000295 85b9     +LDD R27 , Y + 8 + 1
000296 858a     +LDD R24 , Y + 8 + 2
000297 859b     +LDD R25 , Y + 8 + 3
                 	__GETD2S 8
000298 940e 059e 	CALL __CPD02
00029a f494      	BRGE _0x2000013
00029b 940e 0353 	CALL SUBOPT_0x15
00029d 940e 059a 	CALL __CPD10
00029f f429      	BRNE _0x2000014
                +
0002a0 e0e0     +LDI R30 , LOW ( 0x3F800000 )
0002a1 e0f0     +LDI R31 , HIGH ( 0x3F800000 )
0002a2 e860     +LDI R22 , BYTE3 ( 0x3F800000 )
0002a3 e37f     +LDI R23 , BYTE4 ( 0x3F800000 )
                 	__GETD1N 0x3F800000
0002a4 c034      	RJMP _0x2080001
                 _0x2000014:
                +
0002a5 85a8     +LDD R26 , Y + 8
0002a6 85b9     +LDD R27 , Y + 8 + 1
0002a7 858a     +LDD R24 , Y + 8 + 2
0002a8 859b     +LDD R25 , Y + 8 + 3
                 	__GETD2S 8
0002a9 940e 0358 	CALL SUBOPT_0x16
0002ab df45      	RCALL _exp
0002ac c02c      	RJMP _0x2080001
                 _0x2000013:
0002ad 940e 0353 	CALL SUBOPT_0x15
0002af 01de      	MOVW R26,R28
0002b0 940e 03bb 	CALL __CFD1
0002b2 940e 0566 	CALL __PUTDP1
0002b4 940e 030e 	CALL SUBOPT_0x7
0002b6 940e 03f2 	CALL __CDF1
0002b8 01df      	MOVW R26,R30
0002b9 01cb      	MOVW R24,R22
0002ba 940e 0353 	CALL SUBOPT_0x15
0002bc 940e 05a4 	CALL __CPD12
0002be f019      	BREQ _0x2000015
0002bf 940e 0349 	CALL SUBOPT_0x13
0002c1 c017      	RJMP _0x2080001
                 _0x2000015:
0002c2 940e 034e 	CALL SUBOPT_0x14
0002c4 940e 0386 	CALL __ANEGF1
0002c6 01df      	MOVW R26,R30
0002c7 01cb      	MOVW R24,R22
0002c8 940e 0358 	CALL SUBOPT_0x16
0002ca df26      	RCALL _exp
                +
0002cb 87e8     +STD Y + 8 , R30
0002cc 87f9     +STD Y + 8 + 1 , R31
0002cd 876a     +STD Y + 8 + 2 , R22
0002ce 877b     +STD Y + 8 + 3 , R23
                 	__PUTD1S 8
0002cf 81e8      	LD   R30,Y
0002d0 70e1      	ANDI R30,LOW(0x1)
0002d1 f419      	BRNE _0x2000016
0002d2 940e 034e 	CALL SUBOPT_0x14
0002d4 c004      	RJMP _0x2080001
                 _0x2000016:
0002d5 940e 034e 	CALL SUBOPT_0x14
0002d7 940e 0386 	CALL __ANEGF1
                 _0x2080001:
0002d9 962c      	ADIW R28,12
0002da 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 __seed_G101:
000160           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
0002db 93ba      	ST   -Y,R27
0002dc 93aa      	ST   -Y,R26
0002dd 931a      	ST   -Y,R17
0002de 930a      	ST   -Y,R16
                +
0002df e000     +LDI R16 , LOW ( 0 )
0002e0 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
0002e1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x1:
                +
0002e2 e0e0     +LDI R30 , LOW ( 0x41200000 )
0002e3 e0f0     +LDI R31 , HIGH ( 0x41200000 )
0002e4 e260     +LDI R22 , BYTE3 ( 0x41200000 )
0002e5 e471     +LDI R23 , BYTE4 ( 0x41200000 )
                 	__GETD1N 0x41200000
0002e6 940e 057a 	CALL __PUTPARD1
0002e8 01f8      	MOVW R30,R16
0002e9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x2:
0002ea 940e 053b 	CALL __CWD1
0002ec 940e 03f2 	CALL __CDF1
0002ee 01df      	MOVW R26,R30
0002ef 01cb      	MOVW R24,R22
0002f0 940c 0289 	JMP  _pow
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
0002f2 940e 0540 	CALL __CWD2
0002f4 940e 0586 	CALL __CDF2
0002f6 940e 04ca 	CALL __DIVF21
0002f8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4:
0002f9 01df      	MOVW R26,R30
0002fa 01cb      	MOVW R24,R22
0002fb 940e 0158 	CALL _floor
0002fd 940e 03bb 	CALL __CFD1
0002ff 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5:
000300 940e 053b 	CALL __CWD1
000302 940e 03f2 	CALL __CDF1
000304 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x6:
000305 940e 057f 	CALL __PUTPARD2
000307 940e 0570 	CALL __GETD2S0
000309 940e 0127 	CALL _ftrunc
00030b 940e 0575 	CALL __PUTD1S0
00030d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x7:
00030e 940e 056b 	CALL __GETD1S0
000310 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8:
000311 dffc      	RCALL SUBOPT_0x7
                +
000312 e0a0     +LDI R26 , LOW ( 0x3F800000 )
000313 e0b0     +LDI R27 , HIGH ( 0x3F800000 )
000314 e880     +LDI R24 , BYTE3 ( 0x3F800000 )
000315 e39f     +LDI R25 , BYTE4 ( 0x3F800000 )
                 	__GETD2N 0x3F800000
000316 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x9:
                +
000317 81ae     +LDD R26 , Y + 6
000318 81bf     +LDD R27 , Y + 6 + 1
000319 8588     +LDD R24 , Y + 6 + 2
00031a 8599     +LDD R25 , Y + 6 + 3
                 	__GETD2S 6
00031b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0xA:
                +
00031c 81ee     +LDD R30 , Y + 6
00031d 81ff     +LDD R31 , Y + 6 + 1
00031e 8568     +LDD R22 , Y + 6 + 2
00031f 8579     +LDD R23 , Y + 6 + 3
                 	__GETD1S 6
000320 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0xB:
                +
000321 83ee     +STD Y + 6 , R30
000322 83ff     +STD Y + 6 + 1 , R31
000323 8768     +STD Y + 6 + 2 , R22
000324 8779     +STD Y + 6 + 3 , R23
                 	__PUTD1S 6
000325 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xC:
000326 dff5      	RCALL SUBOPT_0xA
000327 cfef      	RJMP SUBOPT_0x9
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xD:
000328 dff3      	RCALL SUBOPT_0xA
                +
000329 e0a0     +LDI R26 , LOW ( 0x3F800000 )
00032a e0b0     +LDI R27 , HIGH ( 0x3F800000 )
00032b e880     +LDI R24 , BYTE3 ( 0x3F800000 )
00032c e39f     +LDI R25 , BYTE4 ( 0x3F800000 )
                 	__GETD2N 0x3F800000
00032d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0xE:
00032e 940e 047c 	CALL __MULF12
                +
000330 83ea     +STD Y + 2 , R30
000331 83fb     +STD Y + 2 + 1 , R31
000332 836c     +STD Y + 2 + 2 , R22
000333 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
000334 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xF:
000335 940e 047c 	CALL __MULF12
000337 01df      	MOVW R26,R30
000338 01cb      	MOVW R24,R22
000339 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x10:
00033a 940e 0589 	CALL __SWAPD12
00033c 940e 0425 	CALL __SUBF12
00033e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x11:
                +
00033f 81ea     +LDD R30 , Y + 2
000340 81fb     +LDD R31 , Y + 2 + 1
000341 816c     +LDD R22 , Y + 2 + 2
000342 817d     +LDD R23 , Y + 2 + 3
                 	__GETD1S 2
000343 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x12:
                +
000344 85aa     +LDD R26 , Y + 10
000345 85bb     +LDD R27 , Y + 10 + 1
000346 858c     +LDD R24 , Y + 10 + 2
000347 859d     +LDD R25 , Y + 10 + 3
                 	__GETD2S 10
000348 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x13:
                +
000349 e0e0     +LDI R30 , LOW ( 0x0 )
00034a e0f0     +LDI R31 , HIGH ( 0x0 )
00034b e060     +LDI R22 , BYTE3 ( 0x0 )
00034c e070     +LDI R23 , BYTE4 ( 0x0 )
                 	__GETD1N 0x0
00034d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x14:
                +
00034e 85e8     +LDD R30 , Y + 8
00034f 85f9     +LDD R31 , Y + 8 + 1
000350 856a     +LDD R22 , Y + 8 + 2
000351 857b     +LDD R23 , Y + 8 + 3
                 	__GETD1S 8
000352 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x15:
                +
000353 81ec     +LDD R30 , Y + 4
000354 81fd     +LDD R31 , Y + 4 + 1
000355 816e     +LDD R22 , Y + 4 + 2
000356 817f     +LDD R23 , Y + 4 + 3
                 	__GETD1S 4
000357 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x16:
000358 940e 0171 	CALL _log
                +
00035a 81ac     +LDD R26 , Y + 4
00035b 81bd     +LDD R27 , Y + 4 + 1
00035c 818e     +LDD R24 , Y + 4 + 2
00035d 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
00035e cfd6      	RJMP SUBOPT_0xF
                 
                 
                 	.CSEG
                 _delay_ms:
00035f 9610      	adiw r26,0
000360 f039      	breq __delay_ms1
                 __delay_ms0:
000361 95a8      	wdr
                +
000362 ed80     +LDI R24 , LOW ( 0x7D0 )
000363 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000364 9701     +SBIW R24 , 1
000365 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000366 9711      	sbiw r26,1
000367 f7c9      	brne __delay_ms0
                 __delay_ms1:
000368 9508      	ret
                 
                 _frexp:
000369 91e9      	LD   R30,Y+
00036a 91f9      	LD   R31,Y+
00036b 9169      	LD   R22,Y+
00036c 9179      	LD   R23,Y+
00036d fb77      	BST  R23,7
00036e 0f66      	LSL  R22
00036f 1f77      	ROL  R23
000370 2788      	CLR  R24
000371 577e      	SUBI R23,0x7E
000372 0b88      	SBC  R24,R24
000373 937d      	ST   X+,R23
000374 938c      	ST   X,R24
000375 e77e      	LDI  R23,0x7E
000376 9576      	LSR  R23
000377 9567      	ROR  R22
000378 f06e      	BRTS __ANEGF1
000379 9508      	RET
                 
                 _ldexp:
00037a 91e9      	LD   R30,Y+
00037b 91f9      	LD   R31,Y+
00037c 9169      	LD   R22,Y+
00037d 9179      	LD   R23,Y+
00037e fb77      	BST  R23,7
00037f 0f66      	LSL  R22
000380 1f77      	ROL  R23
000381 0f7a      	ADD  R23,R26
000382 9576      	LSR  R23
000383 9567      	ROR  R22
000384 f00e      	BRTS __ANEGF1
000385 9508      	RET
                 
                 __ANEGF1:
000386 9730      	SBIW R30,0
000387 4060      	SBCI R22,0
000388 4070      	SBCI R23,0
000389 f009      	BREQ __ANEGF10
00038a 5870      	SUBI R23,0x80
                 __ANEGF10:
00038b 9508      	RET
                 
                 __ROUND_REPACK:
00038c 2355      	TST  R21
00038d f442      	BRPL __REPACK
00038e 3850      	CPI  R21,0x80
00038f f411      	BRNE __ROUND_REPACK0
000390 ffe0      	SBRS R30,0
000391 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
000392 9631      	ADIW R30,1
000393 1f69      	ADC  R22,R25
000394 1f79      	ADC  R23,R25
000395 f06b      	BRVS __REPACK1
                 
                 __REPACK:
000396 e850      	LDI  R21,0x80
000397 2757      	EOR  R21,R23
000398 f411      	BRNE __REPACK0
000399 935f      	PUSH R21
00039a c0cf      	RJMP __ZERORES
                 __REPACK0:
00039b 3f5f      	CPI  R21,0xFF
00039c f031      	BREQ __REPACK1
00039d 0f66      	LSL  R22
00039e 0c00      	LSL  R0
00039f 9557      	ROR  R21
0003a0 9567      	ROR  R22
0003a1 2f75      	MOV  R23,R21
0003a2 9508      	RET
                 __REPACK1:
0003a3 935f      	PUSH R21
0003a4 2000      	TST  R0
0003a5 f00a      	BRMI __REPACK2
0003a6 c0cf      	RJMP __MAXRES
                 __REPACK2:
0003a7 c0c8      	RJMP __MINRES
                 
                 __UNPACK:
0003a8 e850      	LDI  R21,0x80
0003a9 2e19      	MOV  R1,R25
0003aa 2215      	AND  R1,R21
0003ab 0f88      	LSL  R24
0003ac 1f99      	ROL  R25
0003ad 2795      	EOR  R25,R21
0003ae 0f55      	LSL  R21
0003af 9587      	ROR  R24
                 
                 __UNPACK1:
0003b0 e850      	LDI  R21,0x80
0003b1 2e07      	MOV  R0,R23
0003b2 2205      	AND  R0,R21
0003b3 0f66      	LSL  R22
0003b4 1f77      	ROL  R23
0003b5 2775      	EOR  R23,R21
0003b6 0f55      	LSL  R21
0003b7 9567      	ROR  R22
0003b8 9508      	RET
                 
                 __CFD1U:
0003b9 9468      	SET
0003ba c001      	RJMP __CFD1U0
                 __CFD1:
0003bb 94e8      	CLT
                 __CFD1U0:
0003bc 935f      	PUSH R21
0003bd dff2      	RCALL __UNPACK1
0003be 3870      	CPI  R23,0x80
0003bf f018      	BRLO __CFD10
0003c0 3f7f      	CPI  R23,0xFF
0003c1 f408      	BRCC __CFD10
0003c2 c0a7      	RJMP __ZERORES
                 __CFD10:
0003c3 e156      	LDI  R21,22
0003c4 1b57      	SUB  R21,R23
0003c5 f4aa      	BRPL __CFD11
0003c6 9551      	NEG  R21
0003c7 3058      	CPI  R21,8
0003c8 f40e      	BRTC __CFD19
0003c9 3059      	CPI  R21,9
                 __CFD19:
0003ca f030      	BRLO __CFD17
0003cb efef      	SER  R30
0003cc efff      	SER  R31
0003cd ef6f      	SER  R22
0003ce e77f      	LDI  R23,0x7F
0003cf f977      	BLD  R23,7
0003d0 c01a      	RJMP __CFD15
                 __CFD17:
0003d1 2777      	CLR  R23
0003d2 2355      	TST  R21
0003d3 f0b9      	BREQ __CFD15
                 __CFD18:
0003d4 0fee      	LSL  R30
0003d5 1fff      	ROL  R31
0003d6 1f66      	ROL  R22
0003d7 1f77      	ROL  R23
0003d8 955a      	DEC  R21
0003d9 f7d1      	BRNE __CFD18
0003da c010      	RJMP __CFD15
                 __CFD11:
0003db 2777      	CLR  R23
                 __CFD12:
0003dc 3058      	CPI  R21,8
0003dd f028      	BRLO __CFD13
0003de 2fef      	MOV  R30,R31
0003df 2ff6      	MOV  R31,R22
0003e0 2f67      	MOV  R22,R23
0003e1 5058      	SUBI R21,8
0003e2 cff9      	RJMP __CFD12
                 __CFD13:
0003e3 2355      	TST  R21
0003e4 f031      	BREQ __CFD15
                 __CFD14:
0003e5 9576      	LSR  R23
0003e6 9567      	ROR  R22
0003e7 95f7      	ROR  R31
0003e8 95e7      	ROR  R30
0003e9 955a      	DEC  R21
0003ea f7d1      	BRNE __CFD14
                 __CFD15:
0003eb 2000      	TST  R0
0003ec f40a      	BRPL __CFD16
0003ed d145      	RCALL __ANEGD1
                 __CFD16:
0003ee 915f      	POP  R21
0003ef 9508      	RET
                 
                 __CDF1U:
0003f0 9468      	SET
0003f1 c001      	RJMP __CDF1U0
                 __CDF1:
0003f2 94e8      	CLT
                 __CDF1U0:
0003f3 9730      	SBIW R30,0
0003f4 4060      	SBCI R22,0
0003f5 4070      	SBCI R23,0
0003f6 f0b1      	BREQ __CDF10
0003f7 2400      	CLR  R0
0003f8 f026      	BRTS __CDF11
0003f9 2377      	TST  R23
0003fa f412      	BRPL __CDF11
0003fb 9400      	COM  R0
0003fc d136      	RCALL __ANEGD1
                 __CDF11:
0003fd 2e17      	MOV  R1,R23
0003fe e17e      	LDI  R23,30
0003ff 2011      	TST  R1
                 __CDF12:
000400 f032      	BRMI __CDF13
000401 957a      	DEC  R23
000402 0fee      	LSL  R30
000403 1fff      	ROL  R31
000404 1f66      	ROL  R22
000405 1c11      	ROL  R1
000406 cff9      	RJMP __CDF12
                 __CDF13:
000407 2fef      	MOV  R30,R31
000408 2ff6      	MOV  R31,R22
000409 2d61      	MOV  R22,R1
00040a 935f      	PUSH R21
00040b df8a      	RCALL __REPACK
00040c 915f      	POP  R21
                 __CDF10:
00040d 9508      	RET
                 
                 __SWAPACC:
00040e 934f      	PUSH R20
00040f 01af      	MOVW R20,R30
000410 01fd      	MOVW R30,R26
000411 01da      	MOVW R26,R20
000412 01ab      	MOVW R20,R22
000413 01bc      	MOVW R22,R24
000414 01ca      	MOVW R24,R20
000415 2d40      	MOV  R20,R0
000416 2c01      	MOV  R0,R1
000417 2e14      	MOV  R1,R20
000418 914f      	POP  R20
000419 9508      	RET
                 
                 __UADD12:
00041a 0fea      	ADD  R30,R26
00041b 1ffb      	ADC  R31,R27
00041c 1f68      	ADC  R22,R24
00041d 9508      	RET
                 
                 __NEGMAN1:
00041e 95e0      	COM  R30
00041f 95f0      	COM  R31
000420 9560      	COM  R22
000421 5fef      	SUBI R30,-1
000422 4fff      	SBCI R31,-1
000423 4f6f      	SBCI R22,-1
000424 9508      	RET
                 
                 __SUBF12:
000425 935f      	PUSH R21
000426 df81      	RCALL __UNPACK
000427 3890      	CPI  R25,0x80
000428 f171      	BREQ __ADDF129
000429 e850      	LDI  R21,0x80
00042a 2615      	EOR  R1,R21
                 
00042b c004      	RJMP __ADDF120
                 
                 __ADDF12:
00042c 935f      	PUSH R21
00042d df7a      	RCALL __UNPACK
00042e 3890      	CPI  R25,0x80
00042f f139      	BREQ __ADDF129
                 
                 __ADDF120:
000430 3870      	CPI  R23,0x80
000431 f121      	BREQ __ADDF128
                 __ADDF121:
000432 2f57      	MOV  R21,R23
000433 1b59      	SUB  R21,R25
000434 f12b      	BRVS __ADDF1211
000435 f412      	BRPL __ADDF122
000436 dfd7      	RCALL __SWAPACC
000437 cffa      	RJMP __ADDF121
                 __ADDF122:
000438 3158      	CPI  R21,24
000439 f018      	BRLO __ADDF123
00043a 27aa      	CLR  R26
00043b 27bb      	CLR  R27
00043c 2788      	CLR  R24
                 __ADDF123:
00043d 3058      	CPI  R21,8
00043e f028      	BRLO __ADDF124
00043f 2fab      	MOV  R26,R27
000440 2fb8      	MOV  R27,R24
000441 2788      	CLR  R24
000442 5058      	SUBI R21,8
000443 cff9      	RJMP __ADDF123
                 __ADDF124:
000444 2355      	TST  R21
000445 f029      	BREQ __ADDF126
                 __ADDF125:
000446 9586      	LSR  R24
000447 95b7      	ROR  R27
000448 95a7      	ROR  R26
000449 955a      	DEC  R21
00044a f7d9      	BRNE __ADDF125
                 __ADDF126:
00044b 2d50      	MOV  R21,R0
00044c 2551      	EOR  R21,R1
00044d f072      	BRMI __ADDF127
00044e dfcb      	RCALL __UADD12
00044f f438      	BRCC __ADDF129
000450 9567      	ROR  R22
000451 95f7      	ROR  R31
000452 95e7      	ROR  R30
000453 9573      	INC  R23
000454 f413      	BRVC __ADDF129
000455 c020      	RJMP __MAXRES
                 __ADDF128:
000456 dfb7      	RCALL __SWAPACC
                 __ADDF129:
000457 df3e      	RCALL __REPACK
000458 915f      	POP  R21
000459 9508      	RET
                 __ADDF1211:
00045a f7d8      	BRCC __ADDF128
00045b cffb      	RJMP __ADDF129
                 __ADDF127:
00045c 1bea      	SUB  R30,R26
00045d 0bfb      	SBC  R31,R27
00045e 0b68      	SBC  R22,R24
00045f f051      	BREQ __ZERORES
000460 f410      	BRCC __ADDF1210
000461 9400      	COM  R0
000462 dfbb      	RCALL __NEGMAN1
                 __ADDF1210:
000463 2366      	TST  R22
000464 f392      	BRMI __ADDF129
000465 0fee      	LSL  R30
000466 1fff      	ROL  R31
000467 1f66      	ROL  R22
000468 957a      	DEC  R23
000469 f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
00046a 27ee      	CLR  R30
00046b 27ff      	CLR  R31
00046c 2766      	CLR  R22
00046d 2777      	CLR  R23
00046e 915f      	POP  R21
00046f 9508      	RET
                 
                 __MINRES:
000470 efef      	SER  R30
000471 efff      	SER  R31
000472 e76f      	LDI  R22,0x7F
000473 ef7f      	SER  R23
000474 915f      	POP  R21
000475 9508      	RET
                 
                 __MAXRES:
000476 efef      	SER  R30
000477 efff      	SER  R31
000478 e76f      	LDI  R22,0x7F
000479 e77f      	LDI  R23,0x7F
00047a 915f      	POP  R21
00047b 9508      	RET
                 
                 __MULF12:
00047c 935f      	PUSH R21
00047d df2a      	RCALL __UNPACK
00047e 3870      	CPI  R23,0x80
00047f f351      	BREQ __ZERORES
000480 3890      	CPI  R25,0x80
000481 f341      	BREQ __ZERORES
000482 2401      	EOR  R0,R1
000483 9408      	SEC
000484 1f79      	ADC  R23,R25
000485 f423      	BRVC __MULF124
000486 f31c      	BRLT __ZERORES
                 __MULF125:
000487 2000      	TST  R0
000488 f33a      	BRMI __MINRES
000489 cfec      	RJMP __MAXRES
                 __MULF124:
00048a 920f      	PUSH R0
00048b 931f      	PUSH R17
00048c 932f      	PUSH R18
00048d 933f      	PUSH R19
00048e 934f      	PUSH R20
00048f 2711      	CLR  R17
000490 2722      	CLR  R18
000491 2799      	CLR  R25
000492 9f68      	MUL  R22,R24
000493 01a0      	MOVW R20,R0
000494 9f8f      	MUL  R24,R31
000495 2d30      	MOV  R19,R0
000496 0d41      	ADD  R20,R1
000497 1f59      	ADC  R21,R25
000498 9f6b      	MUL  R22,R27
000499 0d30      	ADD  R19,R0
00049a 1d41      	ADC  R20,R1
00049b 1f59      	ADC  R21,R25
00049c 9f8e      	MUL  R24,R30
00049d d027      	RCALL __MULF126
00049e 9fbf      	MUL  R27,R31
00049f d025      	RCALL __MULF126
0004a0 9f6a      	MUL  R22,R26
0004a1 d023      	RCALL __MULF126
0004a2 9fbe      	MUL  R27,R30
0004a3 d01d      	RCALL __MULF127
0004a4 9faf      	MUL  R26,R31
0004a5 d01b      	RCALL __MULF127
0004a6 9fae      	MUL  R26,R30
0004a7 0d11      	ADD  R17,R1
0004a8 1f29      	ADC  R18,R25
0004a9 1f39      	ADC  R19,R25
0004aa 1f49      	ADC  R20,R25
0004ab 1f59      	ADC  R21,R25
0004ac 2fe3      	MOV  R30,R19
0004ad 2ff4      	MOV  R31,R20
0004ae 2f65      	MOV  R22,R21
0004af 2f52      	MOV  R21,R18
0004b0 914f      	POP  R20
0004b1 913f      	POP  R19
0004b2 912f      	POP  R18
0004b3 911f      	POP  R17
0004b4 900f      	POP  R0
0004b5 2366      	TST  R22
0004b6 f02a      	BRMI __MULF122
0004b7 0f55      	LSL  R21
0004b8 1fee      	ROL  R30
0004b9 1fff      	ROL  R31
0004ba 1f66      	ROL  R22
0004bb c002      	RJMP __MULF123
                 __MULF122:
0004bc 9573      	INC  R23
0004bd f24b      	BRVS __MULF125
                 __MULF123:
0004be decd      	RCALL __ROUND_REPACK
0004bf 915f      	POP  R21
0004c0 9508      	RET
                 
                 __MULF127:
0004c1 0d10      	ADD  R17,R0
0004c2 1d21      	ADC  R18,R1
0004c3 1f39      	ADC  R19,R25
0004c4 c002      	RJMP __MULF128
                 __MULF126:
0004c5 0d20      	ADD  R18,R0
0004c6 1d31      	ADC  R19,R1
                 __MULF128:
0004c7 1f49      	ADC  R20,R25
0004c8 1f59      	ADC  R21,R25
0004c9 9508      	RET
                 
                 __DIVF21:
0004ca 935f      	PUSH R21
0004cb dedc      	RCALL __UNPACK
0004cc 3870      	CPI  R23,0x80
0004cd f421      	BRNE __DIVF210
0004ce 2011      	TST  R1
                 __DIVF211:
0004cf f40a      	BRPL __DIVF219
0004d0 cf9f      	RJMP __MINRES
                 __DIVF219:
0004d1 cfa4      	RJMP __MAXRES
                 __DIVF210:
0004d2 3890      	CPI  R25,0x80
0004d3 f409      	BRNE __DIVF218
                 __DIVF217:
0004d4 cf95      	RJMP __ZERORES
                 __DIVF218:
0004d5 2401      	EOR  R0,R1
0004d6 9408      	SEC
0004d7 0b97      	SBC  R25,R23
0004d8 f41b      	BRVC __DIVF216
0004d9 f3d4      	BRLT __DIVF217
0004da 2000      	TST  R0
0004db cff3      	RJMP __DIVF211
                 __DIVF216:
0004dc 2f79      	MOV  R23,R25
0004dd 931f      	PUSH R17
0004de 932f      	PUSH R18
0004df 933f      	PUSH R19
0004e0 934f      	PUSH R20
0004e1 2411      	CLR  R1
0004e2 2711      	CLR  R17
0004e3 2722      	CLR  R18
0004e4 2733      	CLR  R19
0004e5 2744      	CLR  R20
0004e6 2755      	CLR  R21
0004e7 e290      	LDI  R25,32
                 __DIVF212:
0004e8 17ae      	CP   R26,R30
0004e9 07bf      	CPC  R27,R31
0004ea 0786      	CPC  R24,R22
0004eb 0741      	CPC  R20,R17
0004ec f030      	BRLO __DIVF213
0004ed 1bae      	SUB  R26,R30
0004ee 0bbf      	SBC  R27,R31
0004ef 0b86      	SBC  R24,R22
0004f0 0b41      	SBC  R20,R17
0004f1 9408      	SEC
0004f2 c001      	RJMP __DIVF214
                 __DIVF213:
0004f3 9488      	CLC
                 __DIVF214:
0004f4 1f55      	ROL  R21
0004f5 1f22      	ROL  R18
0004f6 1f33      	ROL  R19
0004f7 1c11      	ROL  R1
0004f8 1faa      	ROL  R26
0004f9 1fbb      	ROL  R27
0004fa 1f88      	ROL  R24
0004fb 1f44      	ROL  R20
0004fc 959a      	DEC  R25
0004fd f751      	BRNE __DIVF212
0004fe 01f9      	MOVW R30,R18
0004ff 2d61      	MOV  R22,R1
000500 914f      	POP  R20
000501 913f      	POP  R19
000502 912f      	POP  R18
000503 911f      	POP  R17
000504 2366      	TST  R22
000505 f032      	BRMI __DIVF215
000506 0f55      	LSL  R21
000507 1fee      	ROL  R30
000508 1fff      	ROL  R31
000509 1f66      	ROL  R22
00050a 957a      	DEC  R23
00050b f243      	BRVS __DIVF217
                 __DIVF215:
00050c de7f      	RCALL __ROUND_REPACK
00050d 915f      	POP  R21
00050e 9508      	RET
                 
                 __CMPF12:
00050f 2399      	TST  R25
000510 f09a      	BRMI __CMPF120
000511 2377      	TST  R23
000512 f042      	BRMI __CMPF121
000513 1797      	CP   R25,R23
000514 f048      	BRLO __CMPF122
000515 f429      	BRNE __CMPF121
000516 17ae      	CP   R26,R30
000517 07bf      	CPC  R27,R31
000518 0786      	CPC  R24,R22
000519 f020      	BRLO __CMPF122
00051a f031      	BREQ __CMPF123
                 __CMPF121:
00051b 9498      	CLZ
00051c 9488      	CLC
00051d 9508      	RET
                 __CMPF122:
00051e 9498      	CLZ
00051f 9408      	SEC
000520 9508      	RET
                 __CMPF123:
000521 9418      	SEZ
000522 9488      	CLC
000523 9508      	RET
                 __CMPF120:
000524 2377      	TST  R23
000525 f7c2      	BRPL __CMPF122
000526 1797      	CP   R25,R23
000527 f398      	BRLO __CMPF121
000528 f7a9      	BRNE __CMPF122
000529 17ea      	CP   R30,R26
00052a 07fb      	CPC  R31,R27
00052b 0768      	CPC  R22,R24
00052c f388      	BRLO __CMPF122
00052d f399      	BREQ __CMPF123
00052e cfec      	RJMP __CMPF121
                 
                 __ANEGW1:
00052f 95f1      	NEG  R31
000530 95e1      	NEG  R30
000531 40f0      	SBCI R31,0
000532 9508      	RET
                 
                 __ANEGD1:
000533 95f0      	COM  R31
000534 9560      	COM  R22
000535 9570      	COM  R23
000536 95e1      	NEG  R30
000537 4fff      	SBCI R31,-1
000538 4f6f      	SBCI R22,-1
000539 4f7f      	SBCI R23,-1
00053a 9508      	RET
                 
                 __CWD1:
00053b 2f6f      	MOV  R22,R31
00053c 0f66      	ADD  R22,R22
00053d 0b66      	SBC  R22,R22
00053e 2f76      	MOV  R23,R22
00053f 9508      	RET
                 
                 __CWD2:
000540 2f8b      	MOV  R24,R27
000541 0f88      	ADD  R24,R24
000542 0b88      	SBC  R24,R24
000543 2f98      	MOV  R25,R24
000544 9508      	RET
                 
                 __DIVW21U:
000545 2400      	CLR  R0
000546 2411      	CLR  R1
000547 e190      	LDI  R25,16
                 __DIVW21U1:
000548 0faa      	LSL  R26
000549 1fbb      	ROL  R27
00054a 1c00      	ROL  R0
00054b 1c11      	ROL  R1
00054c 1a0e      	SUB  R0,R30
00054d 0a1f      	SBC  R1,R31
00054e f418      	BRCC __DIVW21U2
00054f 0e0e      	ADD  R0,R30
000550 1e1f      	ADC  R1,R31
000551 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000552 60a1      	SBR  R26,1
                 __DIVW21U3:
000553 959a      	DEC  R25
000554 f799      	BRNE __DIVW21U1
000555 01fd      	MOVW R30,R26
000556 01d0      	MOVW R26,R0
000557 9508      	RET
                 
                 __MODW21:
000558 94e8      	CLT
000559 ffb7      	SBRS R27,7
00055a c004      	RJMP __MODW211
00055b 95a0      	COM  R26
00055c 95b0      	COM  R27
00055d 9611      	ADIW R26,1
00055e 9468      	SET
                 __MODW211:
00055f fdf7      	SBRC R31,7
000560 dfce      	RCALL __ANEGW1
000561 dfe3      	RCALL __DIVW21U
000562 01fd      	MOVW R30,R26
000563 f40e      	BRTC __MODW212
000564 dfca      	RCALL __ANEGW1
                 __MODW212:
000565 9508      	RET
                 
                 __PUTDP1:
000566 93ed      	ST   X+,R30
000567 93fd      	ST   X+,R31
000568 936d      	ST   X+,R22
000569 937c      	ST   X,R23
00056a 9508      	RET
                 
                 __GETD1S0:
00056b 81e8      	LD   R30,Y
00056c 81f9      	LDD  R31,Y+1
00056d 816a      	LDD  R22,Y+2
00056e 817b      	LDD  R23,Y+3
00056f 9508      	RET
                 
                 __GETD2S0:
000570 81a8      	LD   R26,Y
000571 81b9      	LDD  R27,Y+1
000572 818a      	LDD  R24,Y+2
000573 819b      	LDD  R25,Y+3
000574 9508      	RET
                 
                 __PUTD1S0:
000575 83e8      	ST   Y,R30
000576 83f9      	STD  Y+1,R31
000577 836a      	STD  Y+2,R22
000578 837b      	STD  Y+3,R23
000579 9508      	RET
                 
                 __PUTPARD1:
00057a 937a      	ST   -Y,R23
00057b 936a      	ST   -Y,R22
00057c 93fa      	ST   -Y,R31
00057d 93ea      	ST   -Y,R30
00057e 9508      	RET
                 
                 __PUTPARD2:
00057f 939a      	ST   -Y,R25
000580 938a      	ST   -Y,R24
000581 93ba      	ST   -Y,R27
000582 93aa      	ST   -Y,R26
000583 9508      	RET
                 
                 __CDF2U:
000584 9468      	SET
000585 c001      	RJMP __CDF2U0
                 __CDF2:
000586 94e8      	CLT
                 __CDF2U0:
000587 d001      	RCALL __SWAPD12
000588 de6a      	RCALL __CDF1U0
                 
                 __SWAPD12:
000589 2e18      	MOV  R1,R24
00058a 2f86      	MOV  R24,R22
00058b 2d61      	MOV  R22,R1
00058c 2e19      	MOV  R1,R25
00058d 2f97      	MOV  R25,R23
00058e 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
00058f 2e1b      	MOV  R1,R27
000590 2fbf      	MOV  R27,R31
000591 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
000592 2e1a      	MOV  R1,R26
000593 2fae      	MOV  R26,R30
000594 2de1      	MOV  R30,R1
000595 9508      	RET
                 
                 __CPW01:
000596 2400      	CLR  R0
000597 160e      	CP   R0,R30
000598 060f      	CPC  R0,R31
000599 9508      	RET
                 
                 __CPD10:
00059a 9730      	SBIW R30,0
00059b 4060      	SBCI R22,0
00059c 4070      	SBCI R23,0
00059d 9508      	RET
                 
                 __CPD02:
00059e 2400      	CLR  R0
00059f 160a      	CP   R0,R26
0005a0 060b      	CPC  R0,R27
0005a1 0608      	CPC  R0,R24
0005a2 0609      	CPC  R0,R25
0005a3 9508      	RET
                 
                 __CPD12:
0005a4 17ea      	CP   R30,R26
0005a5 07fb      	CPC  R31,R27
0005a6 0768      	CPC  R22,R24
0005a7 0779      	CPC  R23,R25
0005a8 9508      	RET
                 
                 __SAVELOCR6:
0005a9 935a      	ST   -Y,R21
                 __SAVELOCR5:
0005aa 934a      	ST   -Y,R20
                 __SAVELOCR4:
0005ab 933a      	ST   -Y,R19
                 __SAVELOCR3:
0005ac 932a      	ST   -Y,R18
                 __SAVELOCR2:
0005ad 931a      	ST   -Y,R17
0005ae 930a      	ST   -Y,R16
0005af 9508      	RET
                 
                 __LOADLOCR6:
0005b0 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0005b1 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0005b2 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0005b3 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0005b4 8119      	LDD  R17,Y+1
0005b5 8108      	LD   R16,Y
0005b6 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  44 r1 :  34 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:  27 r17:  29 r18:  18 r19:  15 r20:  27 r21:  66 r22: 107 r23: 101 
r24:  75 r25:  66 r26:  86 r27:  60 r28:  10 r29:   1 r30: 176 r31:  85 
x  :   9 y  : 148 z  :   8 
Registers used: 21 out of 35 (60.0%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  19 add   :  11 
adiw  :   8 and   :   5 andi  :   1 asr   :   0 bclr  :   0 bld   :   2 
brbc  :   0 brbs  :   0 brcc  :   7 brcs  :   1 break :   0 breq  :  19 
brge  :   2 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  10 
brlt  :   5 brmi  :   9 brne  :  23 brpl  :   7 brsh  :   3 brtc  :   3 
brts  :   4 brvc  :   4 brvs  :   4 bset  :   0 bst   :   4 call  : 137 
cbi   :   0 cbr   :   1 clc   :   3 clh   :   0 cli   :   1 cln   :   0 
clr   :  39 cls   :   0 clt   :   5 clv   :   0 clz   :   2 com   :  10 
cp    :  11 cpc   :  19 cpi   :  17 cpse  :   0 dec   :  10 des   :   0 
eor   :   7 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   3 inc   :   2 jmp   :  26 ld    :  19 ldd   :  78 ldi   : 134 
lds   :   0 lpm   :   9 lsl   :  17 lsr   :   5 mov   :  44 movw  :  43 
mul   :   9 muls  :   0 mulsu :   0 neg   :   4 nop   :   0 or    :   1 
ori   :   0 out   :  44 pop   :  36 push  :  36 rcall :  36 ret   :  66 
reti  :   0 rjmp  :  49 rol   :  32 ror   :  17 sbc   :  10 sbci  :  16 
sbi   :   0 sbic  :   0 sbis  :   0 sbiw  :  14 sbr   :   3 sbrc  :   2 
sbrs  :   2 sec   :   5 seh   :   0 sei   :   0 sen   :   0 ser   :   8 
ses   :   0 set   :   4 sev   :   0 sez   :   1 sleep :   0 spm   :   0 
st    :  37 std   :  23 sts   :   0 sub   :   5 subi  :  10 swap  :   0 
tst   :  17 wdr   :   1 
Instructions used: 72 out of 116 (62.1%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000b6e   2886     40   2926   16384  17.9%
[.dseg] 0x000060 0x000164      0      4      4    1024   0.4%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 2 warnings
