;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.14 Advanced
;Automatic Program Generator
;ï¿½ Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 10/25/2023
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega16
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*******************************************************/
;
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <math.h>
;#include <stdint.h>
;
;const int sevenSegmentNumberCodes[] = {0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0xfd, 0x07, 0x7f, 0x6f};
;
;uint8_t rotateRight(uint8_t value)
; 0000 0020 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0021   return (value >> 1) | (value << 7);
;PCODE: $0000000F VOL: 0
;	value -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0022 }
;PCODE: $00000018 VOL: 0
;
;uint8_t rotateLeft(uint8_t value)
; 0000 0025 {
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0026   return (value << 1) | (value >> 7);
;PCODE: $0000001B VOL: 0
;	value -> Y+0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0027 }
;PCODE: $00000024 VOL: 0
;
;short getNumberLength(int number)
; 0000 002A {
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 002B   int numberLength = 0;
; 0000 002C   do
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;	number -> Y+2
;	numberLength -> R16,R17
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 002D   {
; 0000 002E     numberLength += 1;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 002F   } while ((int)(number / pow(10, numberLength)) > 0);
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0030   return numberLength;
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0031 }
;PCODE: $00000046 VOL: 0
;
;// 1-indexed
;// for instance 8123 -> 3 = 1st digit
;// for instance 8123 -> 8 = 4st digit
;char getDigitAt(int number, int digit)
; 0000 0037 {
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0038   int i = 0;
; 0000 0039   int remainder = number;
; 0000 003A   int quotient = 0;
; 0000 003B   for (i = getNumberLength(number); i >= digit; i--)
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;	number -> Y+8
;	digit -> Y+6
;	i -> R16,R17
;	remainder -> R18,R19
;	quotient -> R20,R21
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 003C   {
; 0000 003D     quotient = floor(remainder / ceil(pow(10, i - 1)));
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 003E     remainder = floor(remainder % (int)ceil(pow(10, i - 1)));
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 003F   }
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 0040   return quotient;
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 0041 }
;PCODE: $00000086 VOL: 0
;
;void showNumber(int number)
; 0000 0044 {
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 0045   int i = 0;
; 0000 0046   PORTD = 0xfe;
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;	number -> Y+2
;	i -> R16,R17
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 0047   for (i = getNumberLength(number); i > 0; i--)
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 0048   {
; 0000 0049     PORTC = sevenSegmentNumberCodes[getDigitAt(number, i)];
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 004A     delay_ms(1);
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 004B     PORTD = rotateLeft(PORTD);
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 004C     PORTC = 0;
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 004D   }
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 004E }
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;
;// Declare your global variables here
;
;void main(void)
; 0000 0053 {
;PCODE: $000000B8 VOL: 0
; 0000 0054     // Declare your local variables here
; 0000 0055 
; 0000 0056     // Input/Output Ports initialization
; 0000 0057     // Port A initialization
; 0000 0058     // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0059     DDRA = (0 << DDA7) | (0 << DDA6) | (0 << DDA5) | (0 << DDA4) | (0 << DDA3) | (0 << DDA2) | (0 << DDA1) | (0 << DDA0) ...
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 005A     // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 005B     PORTA = (0 << PORTA7) | (0 << PORTA6) | (0 << PORTA5) | (0 << PORTA4) | (0 << PORTA3) | (0 << PORTA2) | (0 << PORTA1 ...
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 005C 
; 0000 005D     // Port B initialization
; 0000 005E     // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 005F     DDRB = (0 << DDB7) | (0 << DDB6) | (0 << DDB5) | (0 << DDB4) | (0 << DDB3) | (0 << DDB2) | (0 << DDB1) | (0 << DDB0) ...
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 0060     // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0061     PORTB = (0 << PORTB7) | (0 << PORTB6) | (0 << PORTB5) | (0 << PORTB4) | (0 << PORTB3) | (0 << PORTB2) | (0 << PORTB1 ...
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 0062 
; 0000 0063     // Port C initialization
; 0000 0064     // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0065     DDRC = (1 << DDC7) | (1 << DDC6) | (1 << DDC5) | (1 << DDC4) | (1 << DDC3) | (1 << DDC2) | (1 << DDC1) | (1 << DDC0) ...
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 0066     // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0067     PORTC = (0 << PORTC7) | (0 << PORTC6) | (0 << PORTC5) | (0 << PORTC4) | (0 << PORTC3) | (0 << PORTC2) | (0 << PORTC1 ...
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 0068 
; 0000 0069     // Port D initialization
; 0000 006A     // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 006B     DDRD = (1 << DDD7) | (1 << DDD6) | (1 << DDD5) | (1 << DDD4) | (1 << DDD3) | (1 << DDD2) | (1 << DDD1) | (1 << DDD0) ...
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 006C     // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 006D     PORTD = (0 << PORTD7) | (0 << PORTD6) | (0 << PORTD5) | (0 << PORTD4) | (0 << PORTD3) | (0 << PORTD2) | (0 << PORTD1 ...
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 006E 
; 0000 006F     // Timer/Counter 0 initialization
; 0000 0070     // Clock source: System Clock
; 0000 0071     // Clock value: Timer 0 Stopped
; 0000 0072     // Mode: Normal top=0xFF
; 0000 0073     // OC0 output: Disconnected
; 0000 0074     TCCR0 = (0 << WGM00) | (0 << COM01) | (0 << COM00) | (0 << WGM01) | (0 << CS02) | (0 << CS01) | (0 << CS00);
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 0075     TCNT0 = 0x00;
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 0076     OCR0 = 0x00;
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 0077 
; 0000 0078     // Timer/Counter 1 initialization
; 0000 0079     // Clock source: System Clock
; 0000 007A     // Clock value: Timer1 Stopped
; 0000 007B     // Mode: Normal top=0xFFFF
; 0000 007C     // OC1A output: Disconnected
; 0000 007D     // OC1B output: Disconnected
; 0000 007E     // Noise Canceler: Off
; 0000 007F     // Input Capture on Falling Edge
; 0000 0080     // Timer1 Overflow Interrupt: Off
; 0000 0081     // Input Capture Interrupt: Off
; 0000 0082     // Compare A Match Interrupt: Off
; 0000 0083     // Compare B Match Interrupt: Off
; 0000 0084     TCCR1A = (0 << COM1A1) | (0 << COM1A0) | (0 << COM1B1) | (0 << COM1B0) | (0 << WGM11) | (0 << WGM10);
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 0085     TCCR1B = (0 << ICNC1) | (0 << ICES1) | (0 << WGM13) | (0 << WGM12) | (0 << CS12) | (0 << CS11) | (0 << CS10);
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 0086     TCNT1H = 0x00;
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 0087     TCNT1L = 0x00;
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 0088     ICR1H = 0x00;
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 0089     ICR1L = 0x00;
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 008A     OCR1AH = 0x00;
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 008B     OCR1AL = 0x00;
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 008C     OCR1BH = 0x00;
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 008D     OCR1BL = 0x00;
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0000 008E 
; 0000 008F     // Timer/Counter 2 initialization
; 0000 0090     // Clock source: System Clock
; 0000 0091     // Clock value: Timer2 Stopped
; 0000 0092     // Mode: Normal top=0xFF
; 0000 0093     // OC2 output: Disconnected
; 0000 0094     ASSR = 0 << AS2;
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 0095     TCCR2 = (0 << PWM2) | (0 << COM21) | (0 << COM20) | (0 << CTC2) | (0 << CS22) | (0 << CS21) | (0 << CS20);
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 0096     TCNT2 = 0x00;
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0000 0097     OCR2 = 0x00;
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 0098 
; 0000 0099     // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 009A     TIMSK = (0 << OCIE2) | (0 << TOIE2) | (0 << TICIE1) | (0 << OCIE1A) | (0 << OCIE1B) | (0 << TOIE1) | (0 << OCIE0) |  ...
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 009B 
; 0000 009C     // External Interrupt(s) initialization
; 0000 009D     // INT0: Off
; 0000 009E     // INT1: Off
; 0000 009F     // INT2: Off
; 0000 00A0     MCUCR = (0 << ISC11) | (0 << ISC10) | (0 << ISC01) | (0 << ISC00);
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0000 00A1     MCUCSR = (0 << ISC2);
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 00A2 
; 0000 00A3     // USART initialization
; 0000 00A4     // USART disabled
; 0000 00A5     UCSRB = (0 << RXCIE) | (0 << TXCIE) | (0 << UDRIE) | (0 << RXEN) | (0 << TXEN) | (0 << UCSZ2) | (0 << RXB8) | (0 <<  ...
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0000 00A6 
; 0000 00A7     // Analog Comparator initialization
; 0000 00A8     // Analog Comparator: Off
; 0000 00A9     // The Analog Comparator's positive input is
; 0000 00AA     // connected to the AIN0 pin
; 0000 00AB     // The Analog Comparator's negative input is
; 0000 00AC     // connected to the AIN1 pin
; 0000 00AD     ACSR = (1 << ACD) | (0 << ACBG) | (0 << ACO) | (0 << ACI) | (0 << ACIE) | (0 << ACIC) | (0 << ACIS1) | (0 << ACIS0);
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 00AE     SFIOR = (0 << ACME);
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0000 00AF 
; 0000 00B0     // ADC initialization
; 0000 00B1     // ADC disabled
; 0000 00B2     ADCSRA = (0 << ADEN) | (0 << ADSC) | (0 << ADATE) | (0 << ADIF) | (0 << ADIE) | (0 << ADPS2) | (0 << ADPS1) | (0 <<  ...
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 00B3 
; 0000 00B4     // SPI initialization
; 0000 00B5     // SPI disabled
; 0000 00B6     SPCR = (0 << SPIE) | (0 << SPE) | (0 << DORD) | (0 << MSTR) | (0 << CPOL) | (0 << CPHA) | (0 << SPR1) | (0 << SPR0);
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0000 00B7 
; 0000 00B8     // TWI initialization
; 0000 00B9     // TWI disabled
; 0000 00BA     TWCR = (0 << TWEA) | (0 << TWSTA) | (0 << TWSTO) | (0 << TWEN) | (0 << TWIE);
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 00BB 
; 0000 00BC     while (1)
;PCODE: $000000FD VOL: 0
; 0000 00BD     {
; 0000 00BE         showNumber(1234);
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0000 00BF     }
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0000 00C0 }
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
